#ifndef __LK_LIST_H__
#define __LK_LIST_H__

#include "Assistance.h"				// 辅助软件包
#include "Node.h"					// 结点类

// 单链表类
template <class ElemType>
class LinkList
{
protected:
	//  单链表的数据成员
	Node<ElemType>* head;				// 头结点指针
	int length;							// 单链表长度 

public:
	//  单链表的函数成员 
	LinkList();							// 无参数的构造函数
	LinkList(ElemType v[], int n);		// 有参数的构造函数
	virtual ~LinkList();				// 析构函数
	int GetLength() const;				// 求单链表长度			 
	bool IsEmpty() const;	 			// 判断单链表是否为空
	void Clear();						// 将单链表清空
	void Show() const;					// 遍历单链表
	Status GetElem(int position, ElemType& e) const;	 // 求指定位置的元素	
	Status SetElem(int position, const ElemType& e);	 // 设置指定位置的元素值
	Status InsertElem(const ElemType& e);	             // 在表尾插入元素
	LinkList(const LinkList<ElemType>& la);            // 复制构造函数
	LinkList<ElemType>& operator =(const LinkList<ElemType>& la); // 重载赋值运算 

	Status InsertElemI(int i, const ElemType& e);	 // 在制定位置插入元素
	Status DeleteElemI(int position);		 // 删除指定位置元素	
	void Inverse();						//逆置
	void AddList(LinkList < ElemType>& l2);		//合并为递减有序单链表
};


// 单链表类的实现部分


template <class ElemType>
LinkList<ElemType>::LinkList()
// 操作结果：构造一个空链表
{
	head = new Node<ElemType>(NULL,NULL);		// 构造头结点
	assert(head);                   // 构造头结点失败，终止程序运行 
	length = 0;						// 初始化单链表长度为0 
}

template <class ElemType>
LinkList<ElemType>::LinkList(ElemType v[], int n)
// 操作结果：根据数组v中的元素构造单链表
{
	Node<ElemType>* p;
	p = head = new Node<ElemType>(v[0],NULL);	// 构造头结点 
	for (int i = 1; i < n; i++) {
		p->next = new Node<ElemType>(v[i], NULL);
		p = p->next;
	}
	length = n;						// 初始化单链表长度为n
}

template <class ElemType>
LinkList<ElemType>::~LinkList()
// 操作结果：销毁单链表
{
	Clear();			// 清空单链表
	delete head;		// 释放头结点所指空间
}

template <class ElemType>
int LinkList<ElemType>::GetLength() const
// 操作结果：返回单链表的长度 
{
	return length;
}

template <class ElemType>
bool LinkList<ElemType>::IsEmpty() const
// 操作结果：如单链表为空，则返回true，否则返回false
{
	return head->next == NULL;
}

template <class ElemType>
void LinkList<ElemType>::Clear()
// 操作结果：清空单链表,删除单链表中所有元素结点 
{
	if (head != NULL)
	{
		Node<ElemType>* p = head->next;
		while (p != NULL) {
			head->next = p->next;
			delete p;
			p = head->next;
		}
		length = 0;
	}
}

template <class ElemType>
void LinkList<ElemType>::Show() const

{
	cout << "显示链表：" << endl;
	Node<ElemType>* p = head;
	while (p != NULL) {
		cout << p->data << endl;
		p = p->next;
	}
}


template <class ElemType>
Status LinkList<ElemType>::GetElem(int i, ElemType& e) const
// 操作结果：当单链表存在第i个元素时，用e返回其值，函数返回ENTRY_FOUND,
//	否则函数返回NOT_PRESENT
{
	if (i < 1 || i > length)
		return RANGE_ERROR;
	else {
		Node<ElemType>* p = head->next;
		int count;
		for (count = 1; count < i; count++)
			p = p->next;	            // p指向第i个结点
		e = p->data;				// 用e返回第i个元素的值
		return ENTRY_FOUND;
	}
}

template <class ElemType>
Status LinkList<ElemType>::SetElem(int i, const ElemType& e)
// 操作结果：将单链表的第i个位置的元素赋值为e,
//	i的取值范围为1≤i≤length,
//	i合法时函数返回SUCCESS,否则函数返回RANGE_ERROR
{
	if (i < 1 || i > length)
		return RANGE_ERROR;
	else {
		Node<ElemType>* p = head->next;
		int count;
		for (count = 1; count < i; count++)
			p = p->next;	           // 取出指向第i个结点的指针	
		p->data = e;			   // 修改第i个元素的值为e 
		return SUCCESS;
	}
}



template <class ElemType>
Status LinkList<ElemType>::InsertElem(const ElemType& e)
// 操作结果：在单链表的表尾位置插入元素e
{
	Node<ElemType>* p = head, * q;
	q = new Node<ElemType>(e, NULL);    // 生成新结点q
	if (length ==0)
	{
		head = q;
	}
	while (p->next != NULL)
	{
		p = p->next;
	}
		p->next = q;                        // 在单链表的表尾位置插入新结点 
	length++;							// 插入成功后，单链表长度加1 
	return SUCCESS;
}

template <class ElemType>
LinkList<ElemType>::LinkList(const LinkList<ElemType>& la)
// 操作结果：复制构造函数，由单链表la构造新单链表
{
	int laLength = la.GetLength();	// 取被复制单链表的长度
	ElemType e;
	head = new Node<ElemType>;		// 构造头指针
	assert(head);                   // 构造头指针失败，终止程序运行 
	length = 0;						// 初始化元素个数

	for (int i = 1; i <= laLength; i++) {	// 复制数据元素
		la.GetElem(i, e);	       // 取出第i个元素的值放在e中 
		InsertElem(e);		       // 将e插入到当前单链表的表尾 
	}
}

template <class ElemType>
LinkList<ElemType>& LinkList<ElemType>::operator =(const LinkList<ElemType>& la)
// 操作结果：重载赋值运算符，将单链表la赋值给当前单链表
{
	if (&la != this) {
		int laLength = la.GetLength();// 取被赋值单链表的长度
		ElemType e;
		Clear();							// 清空当前单链表
		for (int i = 1; i <= laLength; i++) {
			la.GetElem(i, e);		    // 取出第i个元素的值放在e中
			InsertElem(e);		            // 将e插入到当前单链表的表尾
		}
	}
	return *this;
}

template <class ElemType>
Status LinkList<ElemType>::InsertElemI(int i, const ElemType& e)
// 操作结果：在单链表的第i个位置插入元素e

{
	if (i < 1 || i > length + 1)
		return RANGE_ERROR;
	else {
		Node<ElemType>* p = head, * q;
		int count;
		if (i == 1)
		{
			q = new Node<ElemType>(e, head); // 生成新结点q
			head = q;
		}
		else
		{ 
			for (count = 1; count < i-1; count++)
			p = p->next;	                    // p指向第i-1个结点	
			q = new Node<ElemType>(e, p->next); // 生成新结点q
			p->next = q;				        // 将q插入到链表中
		}
		length++;							// 插入成功后，单链表长度加1 
		return SUCCESS;
	}
}

template <class ElemType>
Status LinkList<ElemType>::DeleteElemI(int i)
// 操作结果：删除单链表的第i个位置的元素

{
	if (i < 1 || i > length)
		return RANGE_ERROR;   // i范围错		 
	else {
		Node<ElemType>* p = head, * q;
		int count;
		if (i == 1)
		{
			q = head;
			head = head->next;
		}
		else
		{
			for (count = 1; count < i-1; count++)
			p = p->next;	      // p指向第i-1个结点	
			q = p->next;	      // q指向第i个结点
			p->next = q->next;	  // 删除结点
		}
		length--;			  // 删除成功后元素个数减1 
		delete q;			  // 释放被删结点
		return SUCCESS;
	}
}

template <class ElemType>
void LinkList<ElemType>::Inverse()
{
	Node<ElemType>*p , *q, *r;
	p = head;
	q = head->next;
	r = q->next;
	p->next = NULL;
	while (r != NULL)
	{
		q->next = p;
		p = q;
		q = r;
		r = r->next;
	}
	q->next = p;
	head = q;
}

template<class ElemType>
void LinkList<ElemType>::AddList(LinkList<ElemType>& l2)
{
	//Inverse();
	//l2.Inverse();
	Node<ElemType>* p1, * p2,*q,*r;
	p1 = head;
	p2 = l2.head;
	head = NULL;
	l2.head = NULL;
	while(p2 != NULL && p1!= NULL)
	{
		if ( p1->data <= p2->data)
		{
			q= p1;
			p1 = p1->next;
		}
		else
		{
			q = p2;
			p2 = p2->next;
		}
		q->next = head;
		head = q;
	}
	if (p1 == NULL)
	{
		r = p2;
	}
	else
	{
		r = p1;
	}
	while (r != NULL)
	{
		q = r;
		r = r->next;
		q->next = head;
		head = q;
	}
	length += l2.length;
	l2.length = 0;
}
#endif

